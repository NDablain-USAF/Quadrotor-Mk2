// Example to show how to transmit and receive data as Master using ATMega328P Two Wire Interface (TWI)
// Test sensor is BMP 390 Barometer, internal pullup resistors are utilized on SDA/SCL pins of MCU
// Can be changed to use any sensor, just change the addresses defined at the start as well as the
// Register Data being written and length of the data array to be read
// Created by Nathan Dablain

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/twi.h>
#include <HardwareSerial.h>

#define BMTR_ADRS 0x77 // BMP 390 Address
#define BMTR_PWR_CTRL 0x1B // Power control register
#define BMTR_OSR 0x1C // Output sample rate register
#define BMTR_ODR 0x1D // Output data rate register
#define BMTR_CON_START 0x32 // Start register of factory calibration data

// Transmit: Writes one byte of data into a slave device register
// returns 4 if successful, lower numbers indicate stage of error 
uint8_t Transmit (uint8_t Slave_Address, uint8_t Register_Address, uint8_t Register_Data);
// Read: Reads up to 256 bytes of data from the specified slave address
// IMPORTANT, is looking for an array of data, pass address if only reading a single value
uint8_t Read(uint8_t Slave_Address, uint8_t Register_Address, uint8_t data[]);
// A reproduction of the delay() function, prevents overwhelming the serial monitor
void Detain (uint16_t length);
// Use to group Transmit calls when sensor is being set up 
uint8_t Initialize();

int main(){
  sei();
  // f_SCL = 16000000/(16+2*(TWBR*Prescaler)) TWBR = 1, Prescaler = 16
  TWBR = 1;
  TWSR = (1<<TWPS1);
  Serial.begin(115200);
  uint8_t Status = Initialize();
  while(1){
    if (Status==1){
      uint8_t data[21];
      uint8_t result = Read(BMTR_ADRS,BMTR_CON_START,data);
      Detain(65000);
      if (result==1){
        for (uint8_t i=0;i<21;i++){
          Serial.print(data[i]);
          Serial.print(",");
        }
        Serial.println();
      }
      else {
        Serial.println("Bad Read");
      }
    }
    Detain(65000);
  }

  return 0;
}

uint8_t Initialize(){
  uint8_t Register_Data0 = (1<<5) | (1<<4) | (1<<1) | (1<<0);
  uint8_t result0 = Transmit(BMTR_ADRS,BMTR_PWR_CTRL,Register_Data0);
  uint8_t Register_Data1 = (1<<4) | (1<<2) | (1<<0);
  uint8_t result1 = Transmit(BMTR_ADRS,BMTR_OSR,Register_Data1);
  uint8_t Register_Data2 = (1<<2);
  uint8_t result2 = Transmit(BMTR_ADRS,BMTR_ODR,Register_Data2);
  if ((result0==4)&&(result1==4)&&(result2==4)){return 1;}
  else {return 0;}
}

void Detain(uint16_t length){
      for (uint16_t i=0;i<length;i++){asm("");}
}

uint8_t Transmit (uint8_t Slave_Address, uint8_t Register_Address, uint8_t Register_Data){
  TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // TWINT starts operation of TWI, TWSTA sends START condition, TWEN enables TWI
  while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set indicating START condition set
  if (((TWSR & 0xF8) != TW_REP_START)&&((TWSR & 0xF8) != TW_START)){return 0;} // Mask prescaler bits in TWSR, check if not equal to start condition to trigger error
  TWDR = Slave_Address<<1; // Write slave address to data register as write
  TWCR = (1<<TWINT) | (1<<TWEN); // Start transmission
  while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
  if ((TWSR & 0xF8) != TW_MT_SLA_ACK){return 1;} // Mask prescaler bits in TWSR, check if slave acknowledge
  TWDR = Register_Address; // Send data (address to write to)
  TWCR = (1<<TWINT) | (1<<TWEN); // Start transmission
  while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
  if ((TWSR & 0xF8) != TW_MT_DATA_ACK){return 2;} // Mask prescaler bits in TWSR, check if data sent
  TWDR = Register_Data; // Send data (new value of address)
  TWCR = (1<<TWINT) | (1<<TWEN); // Start transmission
  while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
  if ((TWSR & 0xF8) != TW_MT_DATA_ACK){return 3;} // Mask prescaler bits in TWSR, check if data sent
  TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // Send Stop
  return 4; // Success
}

uint8_t Read(uint8_t Slave_Address, uint8_t Register_Address, uint8_t data[]){
  volatile uint8_t i = 0;
  uint8_t length = sizeof(data)-1;
  while(i<1){  
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // TWINT starts operation of TWI, TWSTA sends START condition, TWEN enables TWI
    while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set indicating START condition set
    if (((TWSR & 0xF8) != TW_REP_START)&&((TWSR & 0xF8) != TW_START)){return 0;} // Mask prescaler bits in TWSR, check if not equal to start condition to trigger error
    TWDR = Slave_Address<<1; // Write slave address to data register as write
    TWCR = (1<<TWINT) | (1<<TWEN); // Start transmission
    while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
    if ((TWSR & 0xF8) != TW_MT_SLA_ACK){return 0;} // Mask prescaler bits in TWSR, check if slave acknowledge
    TWDR = Register_Address; // Send data (address device looks at)
    TWCR = (1<<TWINT) | (1<<TWEN); // Start transmission
    while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
    if ((TWSR & 0xF8) != TW_MT_DATA_ACK){return 0;} // Mask prescaler bits in TWSR, check if data sent
    TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN); // Send Stop
    i++;
  }
  if (i>0){

    volatile uint8_t j = 0;
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // TWINT starts operation of TWI, TWSTA sends START condition, TWEN enables TWI
    while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set indicating START condition set
    if (((TWSR & 0xF8) != TW_REP_START)&&((TWSR & 0xF8) != TW_START)){return 0;} // Mask prescaler bits in TWSR, check if not equal to start condition to trigger error
    TWDR = (Slave_Address<<1) | (1<<0); // Write slave address to data register as read
    TWCR = (1<<TWINT) | (1<<TWEN); // Start transmission
    while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
    if ((TWSR & 0xF8) != TW_MR_SLA_ACK){return 0;} // Mask prescaler bits in TWSR, check if slave acknowledge

    while(j<length){
      TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA); // Data byte received and NACK transmitted back to slave
      while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
      if ((TWSR & 0xF8) != TW_MR_DATA_ACK){return 0;} // Mask prescaler bits in TWSR, check if slave acknowledge   
      data[j] = TWDR; // Read data sent from slave
      ++j;
    }

    TWCR = (1<<TWINT) | (1<<TWEN) | (0<<TWEA); // Data byte received and NACK transmitted back to slave
    while(!(TWCR & (1<<TWINT))){asm("");} // Wait for TWINT flag to be set
    if ((TWSR & 0xF8) != TW_MR_DATA_NACK){return 0;} // Mask prescaler bits in TWSR, check if slave acknowledge   
    data[j] = TWDR; // Read data sent from slave
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); // Send STOP
  }
  return 1;
}
